#! /usr/bin/env python3
# Copyright (c) 2012--2014 David Eisenstat <eisenstatdavid@gmail.com>
#     and Brown University
# Released under http://opensource.org/licenses/MIT
# May 2014 version

from glob import glob
from os import chdir
from os.path import dirname, join, pardir
from re import compile
from sys import argv


template = '''# This makefile was generated by make_makefile.py.

all: {all}
	@printf '\\n*** Build complete ***\\n\\n'
	@printf 'Possible next actions:\\n'
	@printf ' bin/demo_tsp.sh  # if gnuplot is installed\\n'
	@printf ' bin/flow sr example/flow/network.txt\\n'
	@printf ' bin/maze\\n'
	@printf ' make -j4 check  # for a quad-core\\n'
	@printf '\\n'
.PHONY: all

check: {check} checkdtreesanity checkdtreenaiveincludes checkflow checktsp
	@printf '\\n*** All tests passed ***\\n\\n'
checkdtreesanity: bin/dtree/sanity
	$<
checkdtreenaiveincludes: bin/dtree/naive_includes
	$<
checkflow: bin/flow bin/random_network
	test/flow/test.sh
checktsp: bin/tsp
	test/tsp/test.sh
.PHONY: check checkflow checkdtreesanity checktsp

clean:
	-rm -fR bin
.PHONY: clean

CXX=g++
#CXXFLAGS=-std=c++98 -O2 -Wall -Wextra -Wno-long-long -Wno-maybe-uninitialized -Wno-unused-function -pedantic
CXXFLAGS=-O2 -Wall
STDINT=-D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS
INTTYPES=$(STDINT) -D__STDC_FORMAT_MACROS
SHELL=/bin/sh
{bins}{scripts}{cases}
'''

bintemplate = '''
{target}: {includes} makefile
	mkdir -p bin/dtree
	$(CXX) $(CXXFLAGS) -I. $(INTTYPES) {sources} -o $@
'''

scripttemplate = '''
{target}: {source} makefile
	mkdir -p bin
	cp -f $< $@
'''

casetemplate = '''
{checktarget}: {target}
	{target} | diff -c {expected} -
.PHONY: {checktarget}
'''

cache = {}
includepattern = compile('#include "([^"]*)"')


def basename(path):
    return path.split('/')[-1]


def splitext0(name):
    return name[:name.find('.')]


def readincludes(path):
    includes = cache.get(path)
    if includes is None:
        with open(path) as f:
            includes = includepattern.findall(f.read())
        cache[path] = includes
    return includes


def readincludesrecursively(path, includes):
    if path in includes:
        return
    includes.add(path)
    for include in readincludes(path):
        readincludesrecursively(include, includes)


alltargets = []
checktargets = []
bins = []
scripts = []
cases = []


def addbin(target, sources):
    target = 'bin/' + target
    includes = set()
    for source in sources:
        readincludesrecursively(source, includes)
    includes = sorted(includes)
    bins.append(bintemplate.format(
        target=target,
        sources=' '.join(sources),
        includes=' '.join(includes)))
    return target


def addexample(dirname, sources):
    target = splitext0(sources[0])
    dirname = 'example/{}/'.format(dirname)
    sources = [dirname + source for source in sources]
    alltargets.append(addbin(target, sources))


def addscript(script):
    script += '.sh'
    target = 'bin/' + script
    alltargets.append(target)
    scripts.append(scripttemplate.format(
        target=target, source='example/tsp/' + script))


def addcase(source):
    casename = splitext0(basename(source))
    target = addbin('dtree/' + casename, [source])
    checktarget = 'checkdtree' + casename
    expected = 'test/dtree/expected/{}.txt'.format(casename)
    cases.append(casetemplate.format(
        checktarget=checktarget,
        target=target,
        expected=expected))
    checktargets.append(checktarget)


chdir(join(dirname(argv[0]), pardir))
addexample('flow', [
    'flow.cc',
    'data.cc',
    'error.cc',
    'push_relabel.cc',
    'read.cc',
    'send_relabel.cc',
    'verify.cc',
    'write.cc'])
addexample('flow', ['random_network.cc', 'data.cc', 'write.cc'])
addexample('maze', ['maze.cc'])
addexample('tsp', ['random_points.cc'])
addexample('tsp', ['tsp.cc'])
addscript('demo_tsp')
addscript('plot_tour')
casesources = glob('test/dtree/case/*')
casesources.sort(key=lambda source: int(splitext0(basename(source))))
for source in casesources:
    addcase(source)
addbin('dtree/sanity', ['test/dtree/sanity.cc'])
addbin('dtree/naive_includes', ['test/dtree/naive_includes.cc'])
with open('makefile', 'w') as f:
    f.write(template.format(
        all=' '.join(alltargets),
        check=' '.join(checktargets),
        bins=''.join(bins),
        scripts=''.join(scripts),
        cases=''.join(cases)))
